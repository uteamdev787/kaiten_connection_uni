const iframe = Addon.iframe();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤
const spaceMap = {
  517319: 517325, // –°—á–µ—Ç–∞ -> –î–æ–≥–æ–≤–æ—Ä—ã
  517314: 532009, // –°—á–µ—Ç–∞ -> –î–æ–≥–æ–≤–æ—Ä—ã  
  517324: 532011  // –°—á–µ—Ç–∞ -> –î–æ–≥–æ–≤–æ—Ä—ã
};

const boardMap = {
  1183281: 1183294, // –°—á–µ—Ç–∞ -> –î–æ–≥–æ–≤–æ—Ä—ã
  1183290: 1215408, // –°—á–µ—Ç–∞ -> –î–æ–≥–æ–≤–æ—Ä—ã  
  1183292: 1215428  // –°—á–µ—Ç–∞ -> –î–æ–≥–æ–≤–æ—Ä—ã
};

const innFieldId = 415447;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const innBadge = document.getElementById('innBadge');
const loadingState = document.getElementById('loadingState');
const resultsState = document.getElementById('resultsState');
const noResultsState = document.getElementById('noResultsState');
const contractsList = document.getElementById('contractsList');
const linkBtn = document.getElementById('linkBtn');
const cancelBtn = document.getElementById('cancelBtn');
const searchInterface = document.getElementById('searchInterface');

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let currentCard = null;
let innValue = null;
let foundContracts = [];
let selectedContractId = null;
let searchConfig = null;

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤
function displayContracts(contracts) {
  contractsList.innerHTML = '';
  
  contracts.forEach(contract => {
    const contractCard = document.createElement('div');
    contractCard.className = 'contract-card';
    contractCard.dataset.contractId = contract.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –ò–ù–ù –∏–∑ properties –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const contractINN = contract.properties && contract.properties[`id_${innFieldId}`];
    
    // –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    const description = contract.description ? 
      (contract.description.length > 150 ? 
        contract.description.substring(0, 150) + '...' : 
        contract.description) : 
      '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    
    contractCard.innerHTML = `
      <div class="contract-header">
        <div class="contract-title">${contract.title}</div>
        <div class="contract-id">#${contract.id}</div>
      </div>
      <div class="contract-description">${description}</div>
      <div class="contract-meta">
        <span>üè¢ –ò–ù–ù: ${contractINN || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
        <span>üìÅ –î–æ—Å–∫–∞: ${contract.board_id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
        <span>üìÖ ${contract.updated ? new Date(contract.updated).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
      </div>
    `;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
    contractCard.addEventListener('click', () => {
      // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
      document.querySelectorAll('.contract-card').forEach(card => {
        card.classList.remove('selected');
      });
      
      // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
      contractCard.classList.add('selected');
      selectedContractId = contract.id;
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
      linkBtn.disabled = false;
      linkBtn.textContent = `–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –¥–æ–≥–æ–≤–æ—Ä—É #${contract.id}`;
    });
    
    contractsList.appendChild(contractCard);
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
function determineSearchConfig(card) {
  console.log('–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:', card.id);
  console.log('Board ID –∫–∞—Ä—Ç–æ—á–∫–∏:', card.board_id);
  console.log('Space ID –∫–∞—Ä—Ç–æ—á–∫–∏:', card.space_id);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ space_id –∏ –µ–≥–æ –º–∞–ø–ø–∏–Ω–≥
  if (card.space_id && spaceMap[card.space_id]) {
    const targetSpaceId = spaceMap[card.space_id];
    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: ${card.space_id} -> ${targetSpaceId}`);
    return {
      method: 'space',
      currentId: card.space_id,
      targetId: targetSpaceId,
      searchBy: 'space_id'
    };
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º board_id –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
  if (card.board_id && boardMap[card.board_id]) {
    const targetBoardId = boardMap[card.board_id];
    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–æ—Å–æ–∫: ${card.board_id} -> ${targetBoardId}`);
    return {
      method: 'board',
      currentId: card.board_id,
      targetId: targetBoardId,
      searchBy: 'board_id'
    };
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—à–∏–±–∫—É
  const debugInfo = {
    cardId: card.id,
    spaceId: card.space_id,
    boardId: card.board_id,
    availableSpaces: Object.keys(spaceMap),
    availableBoards: Object.keys(boardMap),
    allCardKeys: Object.keys(card).slice(0, 20) // –ü–µ—Ä–≤—ã–µ 20 –∫–ª—é—á–µ–π
  };
  
  console.error('–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', debugInfo);
  
  throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏.\nSpace ID: ${card.space_id || '–Ω–µ—Ç'}\nBoard ID: ${card.board_id || '–Ω–µ—Ç'}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: ${Object.keys(spaceMap).join(', ')}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å–∫–∏: ${Object.keys(boardMap).join(', ')}`);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
async function searchContracts() {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤');
    console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞:', searchConfig);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ü–µ–ª–µ–≤–æ–π –¥–æ—Å–∫–∏/–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    const searchParams = {};
    searchParams[searchConfig.searchBy] = searchConfig.targetId;
    
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã API –∑–∞–ø—Ä–æ—Å–∞:', searchParams);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    const allCards = await iframe.requestWithContext({
      method: 'GET',
      url: '/cards',
      params: searchParams
    });

    console.log(`–ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å ${searchConfig.searchBy} ${searchConfig.targetId}:`, allCards.length);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –ò–ù–ù –ª–æ–∫–∞–ª—å–Ω–æ
    const innKey = `id_${innFieldId}`;
    const contractsWithINN = allCards.filter(card => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è –ò–ù–ù –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
      const cardINN = card.properties && card.properties[innKey];
      const matches = cardINN && cardINN.toString().trim() === innValue;
      
      if (matches) {
        console.log(`–ù–∞–π–¥–µ–Ω –¥–æ–≥–æ–≤–æ—Ä —Å –ò–ù–ù: #${card.id} - ${card.title}`);
      }
      
      return matches && card.id !== currentCard.id; // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    });

    foundContracts = contractsWithINN;
    
    console.log(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –ò–ù–ù ${innValue}: ${foundContracts.length}`);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    loadingState.style.display = 'none';
    
    if (foundContracts.length === 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const totalCards = allCards.length;
      const cardsWithProperties = allCards.filter(card => card.properties).length;
      const cardsWithINN = allCards.filter(card => 
        card.properties && card.properties[innKey]
      ).length;
      
      console.log(`–û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –ò–ù–ù:`);
      console.log(`- –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –¥–æ—Å–∫–µ: ${totalCards}`);
      console.log(`- –ö–∞—Ä—Ç–æ—á–µ–∫ —Å properties: ${cardsWithProperties}`);
      console.log(`- –ö–∞—Ä—Ç–æ—á–µ–∫ —Å –ø–æ–ª–µ–º –ò–ù–ù: ${cardsWithINN}`);
      
      if (cardsWithINN > 0) {
        const sampleINNs = allCards
          .filter(card => card.properties && card.properties[innKey])
          .slice(0, 5)
          .map(card => `#${card.id}: "${card.properties[innKey]}"`)
          .join(', ');
        console.log(`–ü—Ä–∏–º–µ—Ä—ã –ò–ù–ù –Ω–∞ –¥–æ—Å–∫–µ: ${sampleINNs}`);
      }
      
      noResultsState.style.display = 'block';
      noResultsState.innerHTML = `
        <div class="no-results-icon">üìÑ</div>
        <div style="font-weight: 600; margin-bottom: 8px;">
          –î–æ–≥–æ–≤–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        </div>
        <div style="line-height: 1.5; margin-bottom: 12px;">
          –î–æ–≥–æ–≤–æ—Ä—ã —Å –ò–ù–ù "${innValue}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –¥–æ—Å–∫–µ ${searchConfig.targetId}
        </div>
        <div style="font-size: 12px; color: var(--addon-text-secondary-color);">
          –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –¥–æ—Å–∫–µ: ${totalCards}<br>
          –ö–∞—Ä—Ç–æ—á–µ–∫ —Å –ø–æ–ª–µ–º –ò–ù–ù: ${cardsWithINN}
        </div>
      `;
    } else {
      resultsState.style.display = 'block';
      displayContracts(foundContracts);
    }
    
    // –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    iframe.fitSize(searchInterface);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤:', error);
    
    loadingState.style.display = 'none';
    noResultsState.style.display = 'block';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
    noResultsState.innerHTML = `
      <div class="no-results-icon">‚ö†Ô∏è</div>
      <div style="font-weight: 600; margin-bottom: 8px; color: var(--addon-error-color);">
        –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞
      </div>
      <div style="line-height: 1.5; margin-bottom: 8px;">
        ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤'}
      </div>
      <div style="font-size: 11px; color: var(--addon-text-secondary-color);">
        –ú–µ—Ç–æ–¥: ${searchConfig?.method || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}<br>
        Target ID: ${searchConfig?.targetId || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
      </div>
    `;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞ —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º
async function linkToContract() {
  if (!selectedContractId) {
    iframe.showSnackbar('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏', 'warning');
    return;
  }

  try {
    linkBtn.disabled = true;
    linkBtn.textContent = '–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º...';
    
    console.log(`–°–≤—è–∑—ã–≤–∞–Ω–∏–µ: –¥–æ–≥–æ–≤–æ—Ä #${selectedContractId} <- —Å—á–µ—Ç #${currentCard.id}`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–≤—è–∑–∞—Ç—å —á–µ—Ä–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    const response = await iframe.requestWithContext({
      method: 'POST',
      url: `/cards/${selectedContractId}/children`,
      data: {
        card_id: currentCard.id
      }
    });
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤—è–∑—ã–≤–∞–Ω–∏—è:', response);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const selectedContract = foundContracts.find(c => c.id === selectedContractId);
    const contractTitle = selectedContract ? selectedContract.title : `#${selectedContractId}`;
    
    iframe.showSnackbar(`–°—á–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–æ–≥–æ–≤–æ—Ä—É "${contractTitle}"!`, 'success');
    iframe.closePopup();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è:', error);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ parent_id
    try {
      console.log('–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ parent_id');
      
      await iframe.requestWithContext({
        method: 'PUT',
        url: `/cards/${currentCard.id}`,
        data: {
          parent_id: selectedContractId
        }
      });
      
      const selectedContract = foundContracts.find(c => c.id === selectedContractId);
      const contractTitle = selectedContract ? selectedContract.title : `#${selectedContractId}`;
      
      iframe.showSnackbar(`–°—á–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–æ–≥–æ–≤–æ—Ä—É "${contractTitle}" (—á–µ—Ä–µ–∑ parent_id)!`, 'success');
      iframe.closePopup();
      
    } catch (secondError) {
      console.error('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ:', secondError);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å—á–µ—Ç –∫ –¥–æ–≥–æ–≤–æ—Ä—É';
      
      if (error.response) {
        const status = error.response.status;
        switch (status) {
          case 403:
            errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫';
            break;
          case 404:
            errorMessage = '–î–æ–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω';
            break;
          case 400:
            errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö';
            break;
          case 409:
            errorMessage = '–°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
            break;
          default:
            errorMessage += ` (HTTP ${status})`;
        }
      }
      
      iframe.showSnackbar(errorMessage, 'error');
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
      linkBtn.disabled = false;
      linkBtn.textContent = '–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É';
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
cancelBtn.addEventListener('click', () => {
  iframe.closePopup();
});

linkBtn.addEventListener('click', linkToContract);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ popup
iframe.render(async () => {
  try {
    console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø POPUP –ü–û–ò–°–ö–ê –î–û–ì–û–í–û–†–û–í ===');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    currentCard = await iframe.getCard();
    
    if (!currentCard) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏');
    }

    console.log('–ö–∞—Ä—Ç–æ—á–∫–∞:', currentCard.id);
    console.log('Board ID:', currentCard.board_id);
    console.log('Space ID:', currentCard.space_id);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ò–ù–ù –∏–∑ —Å–≤–æ–π—Å—Ç–≤ –∫–∞—Ä—Ç–æ—á–∫–∏
    const innKey = `id_${innFieldId}`;
    innValue = currentCard.properties && currentCard.properties[innKey];
    
    console.log('–ü–æ–ª–µ –ò–ù–ù (–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ):', innKey, innValue);
    console.log('Properties:', currentCard.properties);
    
    if (!innValue || innValue.toString().trim().length === 0) {
      throw new Error('–ü–æ–ª–µ –ò–ù–ù –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ');
    }

    innValue = innValue.toString().trim();
    console.log('–ò–ù–ù –¥–ª—è –ø–æ–∏—Å–∫–∞:', innValue);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ò–ù–ù –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    innBadge.textContent = `–ò–ù–ù: ${innValue}`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞
    searchConfig = determineSearchConfig(currentCard);
    console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞:', searchConfig);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    await searchContracts();
    
  } catch (error) {
    console.error('=== –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ===');
    console.error('–û—à–∏–±–∫–∞:', error);
    console.error('–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞:', currentCard);
    
    loadingState.style.display = 'none';
    noResultsState.style.display = 'block';
    noResultsState.innerHTML = `
      <div class="no-results-icon">‚ö†Ô∏è</div>
      <div style="font-weight: 600; margin-bottom: 8px; color: var(--addon-error-color);">
        –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      </div>
      <div style="line-height: 1.5; margin-bottom: 12px;">
        ${error.message}
      </div>
      <div style="font-size: 12px; color: var(--addon-text-secondary-color);">
        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è –ò–ù–ù
      </div>
    `;
    
    iframe.fitSize(searchInterface);
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
function determineSearchConfig(card) {
  console.log('=== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–û–ò–°–ö–ê ===');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ space_id
  if (card.space_id && spaceMap[card.space_id]) {
    const config = {
      method: 'space',
      currentId: card.space_id,
      targetId: spaceMap[card.space_id],
      searchBy: 'space_id'
    };
    console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:', config);
    return config;
  }
  
  // –ó–∞—Ç–µ–º —á–µ—Ä–µ–∑ board_id  
  if (card.board_id && boardMap[card.board_id]) {
    const config = {
      method: 'board',
      currentId: card.board_id,
      targetId: boardMap[card.board_id],
      searchBy: 'board_id'
    };
    console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –¥–æ—Å–∫—É:', config);
    return config;
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  const debug = {
    cardId: card.id,
    spaceId: card.space_id,
    boardId: card.board_id,
    availableSpaceKeys: Object.keys(spaceMap),
    availableBoardKeys: Object.keys(boardMap)
  };
  
  console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞–ø–ø–∏–Ω–≥:', debug);
  throw new Error(`–ú–∞–ø–ø–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–¢–µ–∫—É—â–∏–µ ID:\n- Space: ${card.space_id || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n- Board: ${card.board_id || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏:\n- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: ${Object.keys(spaceMap).join(', ')}\n- –î–æ—Å–∫–∏: ${Object.keys(boardMap).join(', ')}`);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –¥–æ—Å–∫–µ/–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ  
async function searchContracts() {
  try {
    console.log('=== –ù–ê–ß–ê–õ–û –ü–û–ò–°–ö–ê –î–û–ì–û–í–û–†–û–í ===');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const apiParams = {};
    apiParams[searchConfig.searchBy] = searchConfig.targetId;
    
    console.log('API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', apiParams);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ü–µ–ª–µ–≤–æ–π –¥–æ—Å–∫–∏/–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    const allCards = await iframe.requestWithContext({
      method: 'GET',
      url: '/cards',
      params: apiParams
    });

    console.log(`API –≤–µ—Ä–Ω—É–ª –∫–∞—Ä—Ç–æ—á–µ–∫: ${allCards ? allCards.length : 'null/undefined'}`);
    
    if (!allCards || !Array.isArray(allCards)) {
      throw new Error('API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ò–ù–ù –ª–æ–∫–∞–ª—å–Ω–æ
    const innKey = `id_${innFieldId}`;
    const matchingContracts = [];
    
    allCards.forEach(card => {
      const cardINN = card.properties && card.properties[innKey];
      const cardINNString = cardINN ? cardINN.toString().trim() : '';
      
      if (cardINNString === innValue && card.id !== currentCard.id) {
        matchingContracts.push(card);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ–≥–æ–≤–æ—Ä: #${card.id} "${card.title}" —Å –ò–ù–ù: "${cardINNString}"`);
      } else if (cardINNString && cardINNString.includes(innValue.slice(0, 8))) {
        console.log(`üîç –ü–æ—Ö–æ–∂–∏–π –ò–ù–ù: #${card.id} "${card.title}" –ò–ù–ù: "${cardINNString}"`);
      }
    });

    foundContracts = matchingContracts;
    console.log(`–ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤: ${foundContracts.length}`);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    loadingState.style.display = 'none';
    
    if (foundContracts.length === 0) {
      console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      noResultsState.style.display = 'block';
    } else {
      console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã');
      resultsState.style.display = 'block';
      displayContracts(foundContracts);
    }
    
    // –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    iframe.fitSize(searchInterface);
    
  } catch (error) {
    console.error('=== –û–®–ò–ë–ö–ê –ü–û–ò–°–ö–ê ===');
    console.error('–û—à–∏–±–∫–∞:', error);
    console.error('Search config:', searchConfig);
    
    loadingState.style.display = 'none';
    noResultsState.style.display = 'block';
    
    noResultsState.innerHTML = `
      <div class="no-results-icon">‚ö†Ô∏è</div>
      <div style="font-weight: 600; margin-bottom: 8px; color: var(--addon-error-color);">
        –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞
      </div>
      <div style="line-height: 1.5; margin-bottom: 8px;">
        ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤'}
      </div>
      <div style="font-size: 11px; color: var(--addon-text-secondary-color);">
        ${searchConfig ? `–ü–æ–∏—Å–∫: ${searchConfig.method} #${searchConfig.targetId}` : '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}
      </div>
    `;
    
    iframe.fitSize(searchInterface);
  }
}