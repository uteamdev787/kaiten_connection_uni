Addon.initialize({
  'card_buttons': async (cardButtonsContext) => {
    const buttons = [];

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const spaceMap = {
      517319: 517325,
      517314: 532009, 
      517324: 532011
    };
    const innFieldId = 415447;

    buttons.push({
      text: 'üîó –°–≤—è–∑–∞—Ç—å –ø–æ –ò–ù–ù',
      callback: async (buttonContext) => {
        try {
          console.log('=== –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===');
          console.log('Button context:', buttonContext);
          console.log('Available methods:', Object.keys(buttonContext));
          
          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          const showMessage = (message, type = 'info') => {
            console.log(`[${type.toUpperCase()}] ${message}`);
            if (buttonContext.showSnackbar) {
              buttonContext.showSnackbar(message, type);
            } else {
              alert(`${type.toUpperCase()}: ${message}`);
            }
          };
          
          // 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
          let context;
          try {
            context = await buttonContext.getContext();
            console.log('Context:', context);
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', e);
            showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–¥–æ–Ω–∞', 'error');
            return;
          }
          
          const cardId = context.card_id || buttonContext.card_id;
          console.log('Card ID:', cardId);
          
          if (!cardId) {
            showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞—Ä—Ç–æ—á–∫–∏', 'error');
            return;
          }
          
          // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
          let currentCard;
          try {
            currentCard = await buttonContext.getCard();
            console.log('=== –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ö–ê–†–¢–û–ß–ö–ò ===');
            console.log('Current card:', JSON.stringify(currentCard, null, 2));
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', e);
            showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏', 'error');
            return;
          }
          
          if (!currentCard) {
            showMessage('–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã', 'error');
            return;
          }
          
          // 3. –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—è –ò–ù–ù
          console.log('=== –ü–û–ò–°–ö –ü–û–õ–Ø –ò–ù–ù ===');
          let innValue = null;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞
          if (currentCard.custom_fields) {
            console.log('custom_fields:', JSON.stringify(currentCard.custom_fields, null, 2));
            const field = currentCard.custom_fields.find(f => f.id === innFieldId || f.field_id === innFieldId);
            if (field) {
              innValue = field.value;
              console.log('–ò–ù–ù –Ω–∞–π–¥–µ–Ω –≤ custom_fields:', field);
            }
          }
          
          if (!innValue && currentCard.fields) {
            console.log('fields:', JSON.stringify(currentCard.fields, null, 2));
            const field = currentCard.fields.find(f => f.id === innFieldId || f.field_id === innFieldId);
            if (field) {
              innValue = field.value;
              console.log('–ò–ù–ù –Ω–∞–π–¥–µ–Ω –≤ fields:', field);
            }
          }
          
          if (!innValue && currentCard.properties) {
            console.log('properties:', JSON.stringify(currentCard.properties, null, 2));
            const field = currentCard.properties.find(f => f.id === innFieldId || f.field_id === innFieldId);
            if (field) {
              innValue = field.value;
              console.log('–ò–ù–ù –Ω–∞–π–¥–µ–Ω –≤ properties:', field);
            }
          }
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ getCardProperties
          if (!innValue) {
            try {
              console.log('–ü—Ä–æ–±—É–µ–º getCardProperties...');
              const cardProps = await buttonContext.getCardProperties('customProperties');
              console.log('Card properties:', JSON.stringify(cardProps, null, 2));
              
              const innProp = cardProps.find(prop => prop.property && prop.property.id === innFieldId);
              if (innProp) {
                innValue = innProp.value;
                console.log('–ò–ù–ù –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ getCardProperties:', innProp);
              }
            } catch (e) {
              console.error('–û—à–∏–±–∫–∞ getCardProperties:', e);
            }
          }
          
          console.log('–ò—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ò–ù–ù:', innValue);
          
          if (!innValue) {
            showMessage(`–ü–æ–ª–µ –ò–ù–ù (ID: ${innFieldId}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ–µ –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ`, 'warning');
            return;
          }
          
          // 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
          let currentSpaceId = null;
          if (currentCard.space && currentCard.space.id) {
            currentSpaceId = currentCard.space.id;
          } else if (currentCard.space_id) {
            currentSpaceId = currentCard.space_id;
          }
          
          console.log('Current space ID:', currentSpaceId);
          
          if (!currentSpaceId) {
            showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏', 'error');
            return;
          }
          
          // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
          const searchSpaceId = spaceMap[currentSpaceId];
          if (!searchSpaceId) {
            showMessage(`–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ ${currentSpaceId} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫`, 'info');
            return;
          }
          
          console.log('Search space ID:', searchSpaceId);
          
          // 6. –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
          showMessage(`–ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ò–ù–ù ${innValue} –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ ${searchSpaceId}...`, 'info');
          
          let foundCards;
          try {
            const params = new URLSearchParams({
              space_id: searchSpaceId,
              'custom_fields[0][field_id]': innFieldId,
              'custom_fields[0][value]': innValue
            });
            
            console.log('–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:', `/cards?${params.toString()}`);
            
            foundCards = await buttonContext.request({
              method: 'GET',
              url: `/cards?${params.toString()}`
            });
            
            console.log('Found cards:', foundCards);
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', e);
            showMessage(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫: ${e.message}`, 'error');
            return;
          }
          
          // 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          if (!foundCards || foundCards.length === 0) {
            showMessage(`–ö–∞—Ä—Ç–æ—á–∫–∏ —Å –ò–ù–ù ${innValue} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ ${searchSpaceId}`, 'info');
            return;
          }
          
          console.log(`–ù–∞–π–¥–µ–Ω–æ ${foundCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
          
          // 8. –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é)
          const validCards = foundCards.filter(card => card.id !== currentCard.id);
          
          if (validCards.length === 0) {
            showMessage('–ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞. –î—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –Ω–µ—Ç', 'info');
            return;
          }
          
          // 9. –ï—Å–ª–∏ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ - —Å—Ä–∞–∑—É —Å–≤—è–∑—ã–≤–∞–µ–º
          if (validCards.length === 1) {
            const parentCard = validCards[0];
            console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π:', parentCard);
            
            try {
              await buttonContext.request({
                method: 'PUT',
                url: `/cards/${currentCard.id}`,
                data: {
                  parent_id: parentCard.id
                }
              });
              
              showMessage(`–ö–∞—Ä—Ç–æ—á–∫–∞ #${parentCard.id} "${parentCard.title}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è`, 'success');
            } catch (e) {
              console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–∏:', e);
              showMessage(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–≤—è–∑–∏: ${e.message}`, 'error');
            }
            return;
          }
          
          // 10. –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
          const cardsList = validCards.map(card => `#${card.id} - ${card.title}`).join('\n');
          console.log('–ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞:', cardsList);
          
          const userChoice = prompt(
            `–ù–∞–π–¥–µ–Ω–æ ${validCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ò–ù–ù ${innValue}:\n\n${cardsList}\n\n–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã) –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:`
          );
          
          if (!userChoice) {
            showMessage('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', 'info');
            return;
          }
          
          const selectedCardId = parseInt(userChoice.trim(), 10);
          const selectedCard = validCards.find(card => card.id === selectedCardId);
          
          if (!selectedCard) {
            showMessage(`–ö–∞—Ä—Ç–æ—á–∫–∞ —Å ID ${selectedCardId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö`, 'error');
            return;
          }
          
          // 11. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å
          try {
            await buttonContext.request({
              method: 'PUT',
              url: `/cards/${currentCard.id}`,
              data: {
                parent_id: selectedCard.id
              }
            });
            
            showMessage(`–ö–∞—Ä—Ç–æ—á–∫–∞ #${selectedCard.id} "${selectedCard.title}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è`, 'success');
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–∏:', e);
            showMessage(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–≤—è–∑–∏: ${e.message}`, 'error');
          }
          
        } catch (error) {
          console.error('=== –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ===');
          console.error('Error:', error);
          console.error('Stack:', error.stack);
          
          const message = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`;
          if (buttonContext.showSnackbar) {
            buttonContext.showSnackbar(message, 'error');
          } else {
            alert(message);
          }
        }
      }
    });

    return buttons;
  }
});
