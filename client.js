Addon.initialize({
  'card_buttons': async (cardButtonsContext) => {
    const buttons = [];

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const spaceMap = {
      517319: 517325,
      517314: 532009, 
      517324: 532011
    };
    const innFieldId = 415447;

    buttons.push({
      text: 'üîó –°–≤—è–∑–∞—Ç—å –ø–æ –ò–ù–ù',
      callback: async (buttonContext) => {
        try {
          console.log('=== –ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´ –ê–î–î–û–ù–ê ===');
          
          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          const showMessage = (message, type = 'info') => {
            console.log(`[${type.toUpperCase()}] ${message}`);
            if (buttonContext.showSnackbar) {
              buttonContext.showSnackbar(message, type);
            } else {
              alert(`${type.toUpperCase()}: ${message}`);
            }
          };
          
          // 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
          const context = await buttonContext.getContext();
          const cardId = context.card_id;
          const currentCard = await buttonContext.getCard();
          
          console.log('Card ID:', cardId);
          console.log('Current card properties:', currentCard.properties);
          
          // 2. –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ò–ù–ù (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
          const innKey = `id_${innFieldId}`;
          const innValue = currentCard.properties && currentCard.properties[innKey];
          
          console.log('INN key:', innKey);
          console.log('INN value:', innValue);
          
          if (!innValue) {
            showMessage(`–ü–æ–ª–µ –ò–ù–ù (ID: ${innFieldId}) –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ`, 'warning');
            return;
          }
          
          // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —á–µ—Ä–µ–∑ board_id
          let currentSpaceId = currentCard.space?.id || currentCard.space_id;
          
          if (!currentSpaceId && currentCard.board_id) {
            console.log('–ü–æ–ª—É—á–∞–µ–º space_id —á–µ—Ä–µ–∑ board_id:', currentCard.board_id);
            try {
              const boardData = await buttonContext.request({
                method: 'GET',
                url: `/boards/${currentCard.board_id}`
              });
              currentSpaceId = boardData.space_id;
              console.log('Space ID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ –¥–æ—Å–∫—É:', currentSpaceId);
            } catch (e) {
              console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å–∫–∏:', e);
              showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –¥–æ—Å–∫—É', 'error');
              return;
            }
          }
          
          console.log('Current space ID:', currentSpaceId);
          
          if (!currentSpaceId) {
            showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏', 'error');
            return;
          }
          
          // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
          const searchSpaceId = spaceMap[currentSpaceId];
          if (!searchSpaceId) {
            showMessage(`–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ ${currentSpaceId} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫`, 'info');
            return;
          }
          
          console.log('Search space ID:', searchSpaceId);
          
          // 5. –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ç–∞–∫–∏–º –∂–µ –ò–ù–ù
          showMessage(`–ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ò–ù–ù ${innValue} –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ ${searchSpaceId}...`, 'info');
          
          let foundCards;
          try {
            const params = new URLSearchParams({
              space_id: searchSpaceId,
              'custom_fields[0][field_id]': innFieldId,
              'custom_fields[0][value]': innValue
            });
            
            console.log('–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:', `/cards?${params.toString()}`);
            
            foundCards = await buttonContext.request({
              method: 'GET',
              url: `/cards?${params.toString()}`
            });
            
            console.log('Found cards:', foundCards);
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', e);
            showMessage(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫: ${e.message}`, 'error');
            return;
          }
          
          // 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
          if (!foundCards || foundCards.length === 0) {
            showMessage(`–ö–∞—Ä—Ç–æ—á–∫–∏ —Å –ò–ù–ù ${innValue} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ ${searchSpaceId}`, 'info');
            return;
          }
          
          console.log(`–ù–∞–π–¥–µ–Ω–æ ${foundCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
          
          // 7. –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          const validCards = foundCards.filter(card => card.id !== currentCard.id);
          
          if (validCards.length === 0) {
            showMessage('–ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞. –î—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –Ω–µ—Ç', 'info');
            return;
          }
          
          console.log(`–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è: ${validCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
          
          // 8. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ - —Å—Ä–∞–∑—É —Å–≤—è–∑—ã–≤–∞–µ–º
          if (validCards.length === 1) {
            const parentCard = validCards[0];
            console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π:', parentCard);
            
            try {
              await buttonContext.request({
                method: 'PUT',
                url: `/cards/${currentCard.id}`,
                data: {
                  parent_id: parentCard.id
                }
              });
              
              showMessage(`–ö–∞—Ä—Ç–æ—á–∫–∞ #${parentCard.id} "${parentCard.title}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è`, 'success');
            } catch (e) {
              console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–∏:', e);
              showMessage(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–≤—è–∑–∏: ${e.message}`, 'error');
            }
            return;
          }
          
          // 9. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
          const cardsList = validCards.map((card, index) => `${index + 1}. #${card.id} - ${card.title}`).join('\n');
          console.log('–ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞:', cardsList);
          
          const userChoice = prompt(
            `–ù–∞–π–¥–µ–Ω–æ ${validCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ò–ù–ù ${innValue}:\n\n${cardsList}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ (1-${validCards.length}) –∏–ª–∏ ID –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:`
          );
          
          if (!userChoice) {
            showMessage('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', 'info');
            return;
          }
          
          let selectedCard;
          const choice = userChoice.trim();
          
          // –ü—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ (1, 2, 3...)
          const choiceNumber = parseInt(choice, 10);
          if (choiceNumber >= 1 && choiceNumber <= validCards.length) {
            selectedCard = validCards[choiceNumber - 1];
          } else {
            // –ü—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ ID –∫–∞—Ä—Ç–æ—á–∫–∏
            selectedCard = validCards.find(card => card.id === choiceNumber);
          }
          
          if (!selectedCard) {
            showMessage(`–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: "${choice}". –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ ${validCards.length} –∏–ª–∏ ID –∫–∞—Ä—Ç–æ—á–∫–∏`, 'error');
            return;
          }
          
          // 10. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å–≤—è–∑—å
          try {
            console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π:', selectedCard);
            
            await buttonContext.request({
              method: 'PUT',
              url: `/cards/${currentCard.id}`,
              data: {
                parent_id: selectedCard.id
              }
            });
            
            showMessage(`–ö–∞—Ä—Ç–æ—á–∫–∞ #${selectedCard.id} "${selectedCard.title}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è`, 'success');
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–∏:', e);
            showMessage(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–≤—è–∑–∏: ${e.message}`, 'error');
          }
          
        } catch (error) {
          console.error('=== –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ===');
          console.error('Error:', error);
          console.error('Stack:', error.stack);
          
          const message = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`;
          if (buttonContext.showSnackbar) {
            buttonContext.showSnackbar(message, 'error');
          } else {
            alert(message);
          }
        }
      }
    });

    return buttons;
  }
});
