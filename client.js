Addon.initialize({
  'card_buttons': async (cardButtonsContext) => {
    const buttons = [];

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const spaceMap = {
      517319: 517325,
      517314: 532009, 
      517324: 532011
    };
    const innFieldId = 415447;

    buttons.push({
      text: 'üîó –°–≤—è–∑–∞—Ç—å –ø–æ –ò–ù–ù',
      callback: async (buttonContext) => {
        try {
          console.log('=== –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===');
          console.log('Button context:', buttonContext);
          console.log('Available methods:', Object.keys(buttonContext));
          console.log('buttonContext type:', typeof buttonContext);
          
          // –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          const notificationMethods = Object.keys(buttonContext).filter(key => 
            key.toLowerCase().includes('notification') || 
            key.toLowerCase().includes('message') || 
            key.toLowerCase().includes('alert') ||
            key.toLowerCase().includes('show')
          );
          console.log('Notification-like methods:', notificationMethods);
          
          // –ü–æ–∏—Å–∫ API –º–µ—Ç–æ–¥–æ–≤
          const apiMethods = Object.keys(buttonContext).filter(key => 
            key.toLowerCase().includes('api') || 
            key.toLowerCase().includes('card') || 
            key.toLowerCase().includes('request')
          );
          console.log('API-like methods:', apiMethods);
          
          // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (fallback)
          const showMessage = (message, type = 'info') => {
            console.log(`[${type.toUpperCase()}] ${message}`);
            alert(`${type.toUpperCase()}: ${message}`);
          };
          
          // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
          let currentCard;
          try {
            console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É...');
            console.log('card_id:', buttonContext.card_id);
            
            if (buttonContext.getCard) {
              console.log('–ò—Å–ø–æ–ª—å–∑—É—é getCard()');
              currentCard = await buttonContext.getCard();
            } else if (buttonContext.card) {
              console.log('–ò—Å–ø–æ–ª—å–∑—É—é buttonContext.card');
              currentCard = buttonContext.card;
            } else if (buttonContext.request) {
              console.log('–ò—Å–ø–æ–ª—å–∑—É—é request API');
              currentCard = await buttonContext.request({
                method: 'GET',
                url: `/cards/${buttonContext.card_id}`
              });
            } else {
              throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏');
            }
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', e);
            showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏', 'error');
            return;
          }
          
          if (!currentCard) {
            showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏', 'error');
            return;
          }
          
          console.log('Current card:', currentCard);
          
          // 2. –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ò–ù–ù –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
          let innField = null;
          let innValue = null;
          
          console.log('–ü–æ–∏—Å–∫ –ø–æ–ª—è –ò–ù–ù...');
          if (currentCard.custom_fields && Array.isArray(currentCard.custom_fields)) {
            console.log('–ò—â–µ–º –≤ custom_fields:', currentCard.custom_fields);
            innField = currentCard.custom_fields.find(field => field.id === innFieldId);
          } else if (currentCard.fields && Array.isArray(currentCard.fields)) {
            console.log('–ò—â–µ–º –≤ fields:', currentCard.fields);
            innField = currentCard.fields.find(field => field.id === innFieldId);
          }
          
          console.log('INN field found:', innField);
          
          if (innField) {
            innValue = innField.value;
          }
          
          if (!innValue) {
            showMessage('–ü–æ–ª–µ –ò–ù–ù –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ', 'warning');
            return;
          }
          
          console.log('INN value:', innValue);
          
          // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
          let currentSpaceId = null;
          if (currentCard.space && currentCard.space.id) {
            currentSpaceId = currentCard.space.id;
          } else if (currentCard.space_id) {
            currentSpaceId = currentCard.space_id;
          }
          
          console.log('Current space ID:', currentSpaceId);
          
          if (!currentSpaceId) {
            showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏', 'error');
            return;
          }
          
          // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ª–∏ —Ç–µ–∫—É—â–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
          const searchSpaceId = spaceMap[currentSpaceId];
          if (!searchSpaceId) {
            showMessage(`–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ ${currentSpaceId} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫`, 'info');
            return;
          }
          
          console.log('Search space ID:', searchSpaceId);
          
          // 5. –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ç–∞–∫–∏–º –∂–µ –ò–ù–ù –≤ —Ü–µ–ª–µ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
          showMessage(`–ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ò–ù–ù ${innValue} –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ ${searchSpaceId}...`, 'info');
          
          let foundCards;
          try {
            console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫...');
            
            if (buttonContext.findCards) {
              console.log('–ò—Å–ø–æ–ª—å–∑—É—é findCards()');
              foundCards = await buttonContext.findCards({
                space_id: searchSpaceId,
                custom_fields: [{
                  field_id: innFieldId,
                  value: innValue
                }]
              });
            } else if (buttonContext.request) {
              console.log('–ò—Å–ø–æ–ª—å–∑—É—é request API');
              const params = new URLSearchParams({
                space_id: searchSpaceId,
                'custom_fields[0][field_id]': innFieldId,
                'custom_fields[0][value]': innValue
              });
              
              foundCards = await buttonContext.request({
                method: 'GET',
                url: `/cards?${params.toString()}`
              });
            } else {
              throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫');
            }
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫:', e);
            showMessage(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫: ${e.message}`, 'error');
            return;
          }
          
          console.log('Found cards:', foundCards);
          
          // 6. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          if (!foundCards || foundCards.length === 0) {
            showMessage(`–ö–∞—Ä—Ç–æ—á–∫–∏ —Å –ò–ù–ù ${innValue} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ ${searchSpaceId}`, 'info');
            return;
          }
          
          // 7. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ - —Å—Ä–∞–∑—É —Å–≤—è–∑—ã–≤–∞–µ–º
          if (foundCards.length === 1) {
            const parentCard = foundCards[0];
            console.log('Found single card:', parentCard);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –º—ã —Å–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å–∞–º—É —Å —Å–æ–±–æ–π
            if (parentCard.id === currentCard.id) {
              showMessage('–ù–µ–ª—å–∑—è —Å–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å–∞–º—É —Å —Å–æ–±–æ–π', 'warning');
              return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            try {
              console.log('–û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É...');
              if (buttonContext.updateCard) {
                console.log('–ò—Å–ø–æ–ª—å–∑—É—é updateCard()');
                await buttonContext.updateCard(currentCard.id, {
                  parent_id: parentCard.id
                });
              } else if (buttonContext.request) {
                console.log('–ò—Å–ø–æ–ª—å–∑—É—é request API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                await buttonContext.request({
                  method: 'PUT',
                  url: `/cards/${currentCard.id}`,
                  data: {
                    parent_id: parentCard.id
                  }
                });
              } else {
                throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏');
              }
            } catch (e) {
              console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', e);
              showMessage(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–≤—è–∑–∏: ${e.message}`, 'error');
              return;
            }
            
            showMessage(`–ö–∞—Ä—Ç–æ—á–∫–∞ #${parentCard.id} "${parentCard.title}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è`, 'success');
            return;
          }
          
          // 8. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
          const validCards = foundCards.filter(card => card.id !== currentCard.id);
          
          if (validCards.length === 0) {
            showMessage('–ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞. –î—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –Ω–µ—Ç', 'info');
            return;
          }
          
          console.log('Valid cards for linking:', validCards);
          
          // 9. –ü–æ—Å–∫–æ–ª—å–∫—É showChoice –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏ alert
          const cardsList = validCards.map(card => `#${card.id} - ${card.title}`).join('\n');
          console.log('Available cards for linking:', cardsList);
          
          const userChoice = prompt(
            `–ù–∞–π–¥–µ–Ω–æ ${validCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ò–ù–ù ${innValue}:\n\n${cardsList}\n\n–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã) –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:`
          );
          
          if (!userChoice) {
            showMessage('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', 'info');
            return;
          }
          
          const selectedCardId = parseInt(userChoice.trim(), 10);
          const selectedCard = validCards.find(card => card.id === selectedCardId);
          
          if (!selectedCard) {
            showMessage(`–ö–∞—Ä—Ç–æ—á–∫–∞ —Å ID ${selectedCardId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö`, 'error');
            return;
          }
          
          // 10. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π
          try {
            console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π:', selectedCard);
            if (buttonContext.updateCard) {
              await buttonContext.updateCard(currentCard.id, {
                parent_id: selectedCard.id
              });
            } else if (buttonContext.request) {
              await buttonContext.request({
                method: 'PUT',
                url: `/cards/${currentCard.id}`,
                data: {
                  parent_id: selectedCard.id
                }
              });
            }
            
            showMessage(`–ö–∞—Ä—Ç–æ—á–∫–∞ #${selectedCard.id} "${selectedCard.title}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è`, 'success');
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–∏:', e);
            showMessage(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–≤—è–∑–∏: ${e.message}`, 'error');
          }
          
        } catch (error) {
          console.error('=== –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ===');
          console.error('Error:', error);
          console.error('Stack:', error.stack);
          alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    });

    return buttons;
  }
});
