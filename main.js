// –ê–¥–¥–æ–Ω –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏ –ø–æ –ò–ù–ù
kaiten.init((api) => {

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
  // –ö–ª—é—á: ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å–æ —Å—á–µ—Ç–∞–º–∏, –ó–Ω–∞—á–µ–Ω–∏–µ: ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏
  const SPACE_CONNECTIONS = {
    517319: 517325, // –°—á–µ—Ç–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ 517319 ‚Üí –î–æ–≥–æ–≤–æ—Ä–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ 517325
    517314: 532009, // –°—á–µ—Ç–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ 517314 ‚Üí –î–æ–≥–æ–≤–æ—Ä–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ 532009  
    517324: 532011  // –°—á–µ—Ç–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ 517324 ‚Üí –î–æ–≥–æ–≤–æ—Ä–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ 532011
  };

  // ID –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è —Å –ò–ù–ù
  const INN_FIELD_ID = 415447;

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ –ò–ù–ù
  async function findContractsByINN(currentCard, innValue) {
    console.log('üîç –ü–æ–∏—Å–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ –ò–ù–ù:', innValue);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤
    const currentSpaceId = currentCard.space?.id || currentCard.space_id;
    const contractsSpaceId = SPACE_CONNECTIONS[currentSpaceId];
    
    if (!contractsSpaceId) {
      console.log('‚ùå –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤');
      kaiten.ui.showNotification({
        type: 'warning',
        message: `–î–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ ${currentSpaceId} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–∏—Å–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤`
      });
      return [];
    }

    console.log(`üìã –ò—â–µ–º –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤: ${contractsSpaceId}`);

    try {
      // –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å —Ç–∞–∫–∏–º –∂–µ –ò–ù–ù
      const contracts = await api.cards.find({
        space_id: contractsSpaceId,
        custom_fields: [{
          field_id: INN_FIELD_ID,
          value: innValue
        }]
      });

      // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const validContracts = contracts.filter(card => card.id !== currentCard.id);
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–≥–æ–≤–æ—Ä–æ–≤: ${validContracts.length}`);
      return validContracts;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤:', error);
      kaiten.ui.showNotification({
        type: 'error',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      });
      return [];
    }
  }

  // –§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞ —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º
  async function linkInvoiceToContract(invoiceId, contractId, contractTitle) {
    try {
      console.log(`üîó –°–≤—è–∑—ã–≤–∞–µ–º —Å—á–µ—Ç #${invoiceId} —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º #${contractId}`);
      
      await api.cards.update(invoiceId, {
        parent_id: contractId
      });

      kaiten.ui.showNotification({
        type: 'success',
        message: `‚úÖ –°—á–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–æ–≥–æ–≤–æ—Ä—É "${contractTitle}" (#${contractId})`
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è:', error);
      kaiten.ui.showNotification({
        type: 'error',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å—á–µ—Ç –∫ –¥–æ–≥–æ–≤–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é.'
      });
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async function showContractSelectionDialog(invoice, contracts, innValue) {
    if (contracts.length === 0) {
      kaiten.ui.showNotification({
        type: 'info',
        message: `‚ùå –î–æ–≥–æ–≤–æ—Ä—ã —Å –ò–ù–ù ${innValue} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ò–ù–ù.`
      });
      return;
    }

    if (contracts.length === 1) {
      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–æ–≥–æ–≤–æ—Ä - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑—ã–≤–∞–µ–º
      const contract = contracts[0];
      await linkInvoiceToContract(invoice.id, contract.id, contract.title);
      return;
    }

    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
    const contractChoices = contracts.map(contract => ({
      id: contract.id,
      label: `#${contract.id} - ${contract.title}`
    }));

    const selectedChoice = await kaiten.ui.showChoice({
      title: `–ù–∞–π–¥–µ–Ω–æ ${contracts.length} –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –ò–ù–ù ${innValue}`,
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —ç—Ç–æ–º—É —Å—á–µ—Ç—É:',
      choices: contractChoices
    });

    if (selectedChoice) {
      const selectedContract = contracts.find(c => c.id === selectedChoice.id);
      await linkInvoiceToContract(invoice.id, selectedContract.id, selectedContract.title);
    }
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  async function processInvoiceINN(card, innValue) {
    console.log('üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—á–µ—Ç–∞ —Å –ò–ù–ù:', innValue);
    
    // –ò—â–µ–º –¥–æ–≥–æ–≤–æ—Ä—ã
    const contracts = await findContractsByINN(card, innValue);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await showContractSelectionDialog(card, contracts, innValue);
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è –ò–ù–ù
  kaiten.on('card.field_changed', (payload) => {
    const changedFieldId = payload.field?.id || payload.property_id || payload.field_id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–º–µ–Ω–Ω–æ –ø–æ–ª–µ –ò–ù–ù –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
    if (changedFieldId !== INN_FIELD_ID || !payload.value || !payload.value.trim()) {
      return;
    }

    console.log('üìù –ò–ù–ù –∏–∑–º–µ–Ω–µ–Ω –≤ –∫–∞—Ä—Ç–æ—á–∫–µ:', payload.card.id);
    processInvoiceINN(payload.card, payload.value.trim());
  });

  // API –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏
  window.invoiceContractLinker = {
    findAndLink: processInvoiceINN,
    getSpaceConnections: () => SPACE_CONNECTIONS,
    getInnFieldId: () => INN_FIELD_ID
  };

  console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏ –∑–∞–ø—É—â–µ–Ω–∞');
});
