// –ê–¥–¥–æ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏ –ø–æ –ò–ù–ù
kaiten.init((api) => {

  // –ö–∞—Ä—Ç–∞ —Å–≤—è–∑–µ–π: ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å—á–µ—Ç–æ–≤ -> ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤
  const spaceMap = {
    517319: 517325, // –°—á–µ—Ç–∞ –≤ 517319 -> –¥–æ–≥–æ–≤–æ—Ä—ã –≤ 517325
    517314: 532009, // –°—á–µ—Ç–∞ –≤ 517314 -> –¥–æ–≥–æ–≤–æ—Ä—ã –≤ 532009  
    517324: 532011  // –°—á–µ—Ç–∞ –≤ 517324 -> –¥–æ–≥–æ–≤–æ—Ä—ã –≤ 532011
  };

  // ID –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –ò–ù–ù
  const innFieldId = 415447;

  // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞
  let lastSearchData = null;

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ –ò–ù–ù
  async function findContractsByINN(currentCard, innValue, showResults = true) {
    console.log('üîç –ü–æ–∏—Å–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ –ò–ù–ù:', innValue);
    
    if (!innValue || innValue.trim().length === 0) {
      return { success: false, message: '–ò–ù–ù –Ω–µ —É–∫–∞–∑–∞–Ω' };
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤
    const currentSpaceId = currentCard.space?.id || currentCard.space_id;
    const contractsSpaceId = spaceMap[currentSpaceId];
    
    if (!contractsSpaceId) {
      const message = `–î–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ ${currentSpaceId} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–∏—Å–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤`;
      if (showResults) {
        kaiten.ui.showNotification({
          type: 'info',
          message: message
        });
      }
      return { success: false, message };
    }

    try {
      // –ò—â–µ–º –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ç–∞–∫–∏–º –∂–µ –ò–ù–ù
      const contracts = await api.cards.find({
        space_id: contractsSpaceId,
        custom_fields: [{
          field_id: innFieldId,
          value: innValue.trim()
        }]
      });

      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –¥–æ–≥–æ–≤–æ—Ä–æ–≤: ${contracts.length}`);

      // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ —Å–ª—É—á–∞–π –ø–æ–∏—Å–∫–∞ –≤ —Ç–æ–º –∂–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
      const validContracts = contracts.filter(contract => contract.id !== currentCard.id);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      lastSearchData = {
        currentCard,
        innValue: innValue.trim(),
        contracts: validContracts,
        timestamp: Date.now()
      };

      if (validContracts.length === 0) {
        const message = `–î–æ–≥–æ–≤–æ—Ä—ã —Å –ò–ù–ù ${innValue} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`;
        if (showResults) {
          kaiten.ui.showNotification({
            type: 'warning',
            message: message + '. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ò–ù–ù –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä.'
          });
        }
        return { success: false, message, contracts: [] };
      }

      if (showResults) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –¥–æ–≥–æ–≤–æ—Ä –æ–¥–∏–Ω
        if (validContracts.length === 1) {
          const contract = validContracts[0];
          await linkToContract(currentCard.id, contract.id, contract.title);
          
          kaiten.ui.showNotification({
            type: 'success',
            message: `‚úÖ –°—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–æ–≥–æ–≤–æ—Ä—É "${contract.title}"`
          });
          
          return { success: true, linkedContract: contract };
        }
        
        // –ï—Å–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        else {
          const choices = validContracts.map(contract => ({
            id: contract.id,
            label: `üìÑ #${contract.id} - ${contract.title}`,
            description: contract.description ? contract.description.substring(0, 100) + '...' : '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
          }));

          const selectedChoice = await kaiten.ui.showChoice({
            title: `üîó –ù–∞–π–¥–µ–Ω–æ ${validContracts.length} –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –ò–ù–ù ${innValue}`,
            message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å—á–µ—Ç–∞:',
            choices: choices
          });

          if (selectedChoice) {
            const contract = validContracts.find(c => c.id === selectedChoice.id);
            await linkToContract(currentCard.id, contract.id, contract.title);
            
            kaiten.ui.showNotification({
              type: 'success',
              message: `‚úÖ –°—á–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–æ–≥–æ–≤–æ—Ä—É "${contract.title}"`
            });
            
            return { success: true, linkedContract: contract };
          } else {
            return { success: false, message: '–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' };
          }
        }
      }

      return { success: true, contracts: validContracts };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤:', error);
      const message = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      if (showResults) {
        kaiten.ui.showNotification({
          type: 'error',
          message: message
        });
      }
      return { success: false, message, error };
    }
  }

  // –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–∏ —Å—á–µ—Ç–∞ —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º
  async function linkToContract(billCardId, contractCardId, contractTitle) {
    try {
      console.log(`üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ: —Å—á–µ—Ç #${billCardId} -> –¥–æ–≥–æ–≤–æ—Ä #${contractCardId}`);
      
      await api.cards.update(billCardId, {
        parent_id: contractCardId
      });

      console.log('‚úÖ –°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å—á–µ—Ç –∫ –¥–æ–≥–æ–≤–æ—Ä—É';
      if (error.response) {
        errorMessage += ` (${error.response.status})`;
      }
      
      kaiten.ui.showNotification({
        type: 'error',
        message: errorMessage
      });
      
      throw error;
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª—è –ò–ù–ù
  kaiten.on('card.field_changed', async (payload) => {
    console.log('üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–º–µ–Ω–Ω–æ –ø–æ–ª–µ –ò–ù–ù
    const changedFieldId = payload.field?.id || payload.property_id || payload.field_id;
    
    if (changedFieldId !== innFieldId) {
      return; // –ù–µ –Ω–∞—à–µ –ø–æ–ª–µ
    }

    const innValue = payload.value;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ò–ù–ù –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω
    if (!innValue || innValue.trim().length === 0) {
      console.log('‚ÑπÔ∏è –ò–ù–ù –æ—á–∏—â–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω');
      return;
    }

    console.log(`üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ò–ù–ù: ${innValue}`);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—è
    setTimeout(async () => {
      try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        kaiten.ui.showNotification({
          type: 'info',
          message: `üîç –ò—â–µ–º –¥–æ–≥–æ–≤–æ—Ä—ã —Å –ò–ù–ù ${innValue}...`,
          duration: 2000
        });

        await findContractsByINN(payload.card, innValue, true);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      }
    }, 500);
  });

  // API –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ popup
  window.kaitenContractLinker = {
    searchContracts: findContractsByINN,
    linkToContract: linkToContract,
    getLastSearchData: () => lastSearchData,
    getSpaceMapping: () => spaceMap
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ò–ù–ù –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
  async function getCurrentINN(cardId) {
    try {
      const card = await api.cards.get(cardId);
      const innKey = `id_${innFieldId}`;
      return card.properties && card.properties[innKey];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ù–ù:', error);
      return null;
    }
  }

  console.log('üöÄ –ê–¥–¥–æ–Ω —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏ –ø–æ –ò–ù–ù –∑–∞–ø—É—â–µ–Ω (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º)');
  console.log('üìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:', Object.keys(spaceMap).join(', '));
  console.log('üéØ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
});